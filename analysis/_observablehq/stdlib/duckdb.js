var C=Object.defineProperty;var i=(a,t)=>C(a,"name",{value:t,configurable:!0});import*as l from"../../_npm/@duckdb/duckdb-wasm@1.28.0/+esm.js";var D=Object.defineProperty,c=i((a,t)=>D(a,"name",{value:t,configurable:!0}),"i");const T=await l.selectBundle({mvp:{mainModule:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.28.0/dist/duckdb-mvp.wasm"),mainWorker:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.28.0/dist/duckdb-browser-mvp.worker.js")},eh:{mainModule:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.28.0/dist/duckdb-eh.wasm"),mainWorker:import.meta.resolve("../../_npm/@duckdb/duckdb-wasm@1.28.0/dist/duckdb-browser-eh.worker.js")}}),N=new l.ConsoleLogger(l.LogLevel.WARNING);let m,f=[];const d=new Map;function A(a,t){t==null?(d.delete(a),m=u.of(),f=Array.from(d,e=>m.then(r=>y(r._db,...e)))):(d.set(a,t),m??=u.of(),f.push(m.then(e=>y(e._db,a,t))))}i(A,"E"),c(A,"registerTable");async function E(a,...t){return await Promise.all(f),(await(m??=u.of())).query(a.join("?"),t)}i(E,"I"),c(E,"sql");class u{static{i(this,"c")}static{c(this,"DuckDBClient")}constructor(t){Object.defineProperties(this,{_db:{value:t}})}async queryStream(t,e){const r=await this._db.connect();let n,s;try{if(e?.length>0?n=await(await r.prepare(t)).send(...e):n=await r.send(t),s=await n.next(),s.done)throw new Error("missing first batch")}catch(o){throw await r.close(),o}return{schema:B(s.value),async*readRows(){try{for(;!s.done;)yield s.value.toArray(),s=await n.next()}finally{await r.close()}}}}async query(t,e){const r=await this.queryStream(t,e),n=[];for await(const s of r.readRows())for(const o of s)n.push(o);return n.schema=r.schema,n}async queryRow(t,e){const r=(await this.queryStream(t,e)).readRows();try{const{done:n,value:s}=await r.next();return n||!s.length?null:s[0]}finally{await r.return()}}async sql(t,...e){return await this.query(t.join("?"),e)}queryTag(t,...e){return[t.join("?"),e]}escape(t){return`"${t}"`}async describeTables(){return(await this.query("SHOW TABLES")).map(({name:t})=>({name:t}))}async describeColumns({table:t}={}){return(await this.query(`DESCRIBE ${this.escape(t)}`)).map(({column_name:e,column_type:r,null:n})=>({name:e,type:q(r),nullable:n!=="NO",databaseType:r}))}static async of(t={},e={}){const r=await k();return e.query?.castTimestampToDate===void 0&&(e={...e,query:{...e.query,castTimestampToDate:!0}}),e.query?.castBigIntToDouble===void 0&&(e={...e,query:{...e.query,castBigIntToDouble:!0}}),await r.open(e),await Promise.all(Object.entries(t).map(([n,s])=>y(r,n,s))),new u(r)}}Object.defineProperty(u.prototype,"dialect",{value:"duckdb"});async function y(a,t,e){if(e=await e,S(e))await p(a,t,e);else if(h(e))await w(a,t,e);else if(Array.isArray(e))await b(a,t,e);else if(v(e))await I(a,t,e);else if("data"in e){const{data:r,...n}=e;h(r)?await w(a,t,r,n):await b(a,t,r,n)}else if("file"in e){const{file:r,...n}=e;await p(a,t,r,n)}else throw new Error(`invalid source: ${e}`)}i(y,"d"),c(y,"insertSource");async function p(a,t,e,r){const n=await e.url();if(n.startsWith("blob:")){const o=await e.arrayBuffer();await a.registerFileBuffer(e.name,new Uint8Array(o))}else await a.registerFileURL(e.name,new URL(n,location).href,4);const s=await a.connect();try{switch(e.mimeType){case"text/csv":case"text/tab-separated-values":return await s.insertCSVFromPath(e.name,{name:t,schema:"main",...r}).catch(async o=>{if(o.toString().includes("Could not convert"))return await g(s,e,t);throw o});case"application/json":return await s.insertJSONFromPath(e.name,{name:t,schema:"main",...r});default:if(/\.arrow$/i.test(e.name)){const o=new Uint8Array(await e.arrayBuffer());return await s.insertArrowFromIPCStream(o,{name:t,schema:"main",...r})}if(/\.parquet$/i.test(e.name))return await s.query(`CREATE VIEW '${t}' AS SELECT * FROM parquet_scan('${e.name}')`);throw new Error(`unknown file type: ${e.mimeType}`)}}finally{await s.close()}}i(p,"b"),c(p,"insertFile");async function g(a,t,e){return await(await a.prepare(`CREATE TABLE '${e}' AS SELECT * FROM read_csv_auto(?, ALL_VARCHAR=TRUE)`)).send(t.name)}i(g,"k"),c(g,"insertUntypedCSV");async function w(a,t,e,r){const n=await a.connect();try{await n.insertArrowTable(e,{name:t,schema:"main",...r})}finally{await n.close()}}i(w,"l"),c(w,"insertArrowTable");async function I(a,t,e){const r=(await import("../../_npm/apache-arrow@13.0.0/+esm.js")).tableFromIPC(e.toArrowBuffer());return await w(a,t,r)}i(I,"S"),c(I,"insertArqueroTable");async function b(a,t,e,r){const n=(await import("../../_npm/apache-arrow@13.0.0/+esm.js")).tableFromJSON(e);return await w(a,t,n,r)}i(b,"p"),c(b,"insertArray");async function k(){const a=await l.createWorker(T.mainWorker),t=new l.AsyncDuckDB(N,a);return await t.instantiate(T.mainModule),t}i(k,"q"),c(k,"createDuckDB");function q(a){switch(a){case"BIGINT":case"HUGEINT":case"UBIGINT":return"bigint";case"DOUBLE":case"REAL":case"FLOAT":return"number";case"INTEGER":case"SMALLINT":case"TINYINT":case"USMALLINT":case"UINTEGER":case"UTINYINT":return"integer";case"BOOLEAN":return"boolean";case"DATE":case"TIMESTAMP":case"TIMESTAMP WITH TIME ZONE":return"date";case"VARCHAR":case"UUID":return"string";default:return/^DECIMAL\(/.test(a)?"integer":"other"}}i(q,"L"),c(q,"getDuckDBType");function S(a){return a&&typeof a.name=="string"&&typeof a.url=="function"&&typeof a.arrayBuffer=="function"}i(S,"R"),c(S,"isFileAttachment");function v(a){return a&&typeof a.toArrowBuffer=="function"}i(v,"g"),c(v,"isArqueroTable");function h(a){return a&&typeof a.getChild=="function"&&typeof a.toArray=="function"&&a.schema&&Array.isArray(a.schema.fields)}i(h,"h"),c(h,"isArrowTable");function B(a){return a.schema.fields.map(L)}i(B,"B"),c(B,"getArrowTableSchema");function L(a){return{name:a.name,type:R(a.type),nullable:a.nullable,databaseType:`${a.type}`}}i(L,"N"),c(L,"getArrowFieldSchema");function R(a){switch(a.typeId){case 2:return"integer";case 3:case 7:return"number";case 4:case 15:return"buffer";case 5:return"string";case 6:return"boolean";case 8:case 9:case 10:return"date";case 12:case 16:return"array";case 13:case 14:return"object";case 11:case 17:default:return"other"}}i(R,"C"),c(R,"getArrowType");export{u as DuckDBClient,A as registerTable,E as sql};
